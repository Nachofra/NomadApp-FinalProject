stages:
  - build
  - release

build:maven:
  stage: build
  image: maven:3.8.6-openjdk-18
  cache:
    paths:
      - grupo2-backend/target/
  script:
    - cd "grupo2-backend/"
    - echo -e "$DOTENV_CONFIG_BACKEND" > src/main/resources/.env
    - mvn clean install
  artifacts:
    paths:
      - grupo2-backend/target/*.war

build:vite:
  stage: build
  image: node:16.5.0
  cache:
    key:
      files:
        - grupo2-frontend/package-lock.json
      prefix: npm
    paths:
      - grupo2-frontend/node_modules/
  script:
    - cd "grupo2-frontend/"
    - npm install
    - npm run build
  artifacts:
    paths:
      - grupo2-frontend/dist

release:maven:
  stage: release
  image: docker
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER "$CI_REGISTRY" --password-stdin
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - ls
    - cd /grupo2-backend/target/*.war
    - ls
    - cd /
    - "docker build -f  dockerfiles/Dockerfile.backend -t ${CI_REGISTRY}/${CI_PROJECT_PATH}backend:latest --pull ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}backend:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - deployment_backend

release:vite:
  stage: release
  image: docker
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER "$CI_REGISTRY" --password-stdin
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - ls
    - "docker build -f  dockerfiles/Dockerfile.backend -t ${CI_REGISTRY}/${CI_PROJECT_PATH}frontend:latest --pull ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}frontend:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - deployment_frontend